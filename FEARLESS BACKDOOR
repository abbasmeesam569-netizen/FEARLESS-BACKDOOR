-- FEARLESS EXECUTER — Full script (logic preserved, GUI replaced)
-- Based on the 3-part script you provided: behavior unchanged (execute, clear, backdoor uses existing scan()/ _G.scan, ResetCharacter/BodyTypeSwitch).
-- GUI: compact 650x360, top-bar drag, close/minimize, UIPadding, UISizeConstraint.

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local localPlayer = Players.LocalPlayer

local function createFEARLESSInterface()
    -- remove old GUI if present
    pcall(function()
        local old = CoreGui:FindFirstChild("FEARLESS Executer")
        if old then old:Destroy() end
    end)

    -- ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FEARLESS Executer"
    screenGui.ResetOnSpawn = false
    pcall(function() screenGui.Parent = CoreGui end)

    -- Root frame (main)
    local main = Instance.new("Frame")
    main.Name = "Main"
    main.Size = UDim2.new(0, 650, 0, 360) -- compact
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.Position = UDim2.new(0.5, 0, 0.5, 0)
    main.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    main.BorderSizePixel = 0
    main.Parent = screenGui

    -- UI constraints & padding
    local sizeConstraint = Instance.new("UISizeConstraint", main)
    sizeConstraint.MinSize = Vector2.new(520, 300)
    sizeConstraint.MaxSize = Vector2.new(900, 600)

    local padding = Instance.new("UIPadding", main)
    padding.PaddingTop = UDim.new(0, 6)
    padding.PaddingBottom = UDim.new(0, 8)
    padding.PaddingLeft = UDim.new(0, 6)
    padding.PaddingRight = UDim.new(0, 6)

    -- outer stroke
    local outerStroke = Instance.new("UIStroke", main)
    outerStroke.Color = Color3.fromRGB(200, 80, 90)
    outerStroke.Thickness = 3
    outerStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    local bgGrad = Instance.new("UIGradient", main)
    bgGrad.Rotation = 90
    bgGrad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(42,42,42)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(28,28,28))
    }

    -- Top bar for drag + title + controls
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Parent = main
    topBar.Size = UDim2.new(1, 0, 0, 36)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundTransparency = 0.15
    topBar.BorderSizePixel = 0

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Parent = topBar
    title.BackgroundTransparency = 1
    title.Size = UDim2.new(1, -100, 1, 0)
    title.Position = UDim2.new(0, 8, 0, 0)
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 18
    title.Text = "FEARLESS EXECUTER"
    title.TextColor3 = Color3.fromRGB(240,240,240)
    title.TextXAlignment = Enum.TextXAlignment.Left

    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "Minimize"
    minimizeBtn.Parent = topBar
    minimizeBtn.Size = UDim2.new(0, 34, 0, 22)
    minimizeBtn.Position = UDim2.new(1, -80, 0, 7)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(18,18,18)
    minimizeBtn.Font = Enum.Font.SourceSansBold
    minimizeBtn.TextSize = 18
    minimizeBtn.Text = "—"
    minimizeBtn.TextColor3 = Color3.fromRGB(220,220,220)
    minimizeBtn.AutoButtonColor = true
    minimizeBtn.BorderSizePixel = 0
    Instance.new("UICorner", minimizeBtn).CornerRadius = UDim.new(0,4)
    local minStroke = Instance.new("UIStroke", minimizeBtn)
    minStroke.Color = Color3.fromRGB(120,35,45)
    minStroke.Thickness = 1

    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "Close"
    closeBtn.Parent = topBar
    closeBtn.Size = UDim2.new(0, 34, 0, 22)
    closeBtn.Position = UDim2.new(1, -40, 0, 7)
    closeBtn.BackgroundColor3 = Color3.fromRGB(18,18,18)
    closeBtn.Font = Enum.Font.SourceSansBold
    closeBtn.TextSize = 16
    closeBtn.Text = "✕"
    closeBtn.TextColor3 = Color3.fromRGB(230,230,230)
    closeBtn.AutoButtonColor = true
    closeBtn.BorderSizePixel = 0
    Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,4)
    local closeStroke = Instance.new("UIStroke", closeBtn) closeStroke.Color = Color3.fromRGB(120,35,45) closeStroke.Thickness = 1

    -- Executor area (left big black pane) — matches original names
    local execFrame = Instance.new("Frame")
    execFrame.Name = "ExecutorBox"
    execFrame.Parent = main
    execFrame.Position = UDim2.new(0.02, 0, 0, 44)
    execFrame.Size = UDim2.new(0.66, 0, 0, 260)
    execFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
    execFrame.BorderSizePixel = 0
    Instance.new("UICorner", execFrame).CornerRadius = UDim.new(0, 2)
    local execStroke = Instance.new("UIStroke", execFrame) execStroke.Color = Color3.fromRGB(120, 35, 45) execStroke.Thickness = 2

    local execText = Instance.new("TextBox")
    execText.Name = "TextBox"
    execText.Parent = execFrame
    execText.Size = UDim2.new(1, -12, 1, -12)
    execText.Position = UDim2.new(0, 6, 0, 6)
    execText.BackgroundColor3 = Color3.fromRGB(0,0,0)
    execText.TextColor3 = Color3.fromRGB(230,230,230)
    execText.Font = Enum.Font.SourceSans
    execText.TextSize = 18
    execText.ClearTextOnFocus = false
    execText.MultiLine = true
    execText.TextWrapped = true
    execText.PlaceholderText = "-- paste or write code here"

    -- Status label (small) below title
    local status = Instance.new("TextLabel")
    status.Name = "Status"
    status.Parent = main
    status.Size = UDim2.new(0.66, -12, 0, 20)
    status.Position = UDim2.new(0.02, 0, 0, 44 + 260 + 8 - 20) -- placed above buttons row area
    status.BackgroundTransparency = 1
    status.Text = "Status: Idle"
    status.Font = Enum.Font.SourceSans
    status.TextSize = 14
    status.TextColor3 = Color3.fromRGB(200,200,200)
    status.TextXAlignment = Enum.TextXAlignment.Left

    -- Right-side box used for results (kept minimal so your original script's backdoor behavior can place text into editor or use this)
    local resultsFrame = Instance.new("Frame")
    resultsFrame.Name = "ResultsFrame"
    resultsFrame.Parent = main
    resultsFrame.Position = UDim2.new(0.70, 0, 0, 44)
    resultsFrame.Size = UDim2.new(0.28, 0, 0, 260)
    resultsFrame.BackgroundColor3 = Color3.fromRGB(12,12,12)
    resultsFrame.BorderSizePixel = 0
    Instance.new("UICorner", resultsFrame).CornerRadius = UDim.new(0, 3)
    local resultsTitle = Instance.new("TextLabel", resultsFrame)
    resultsTitle.Size = UDim2.new(1, -8, 0, 20)
    resultsTitle.Position = UDim2.new(0, 6, 0, 6)
    resultsTitle.BackgroundTransparency = 1
    resultsTitle.Font = Enum.Font.SourceSansBold
    resultsTitle.TextSize = 14
    resultsTitle.Text = "Results"
    resultsTitle.TextColor3 = Color3.fromRGB(230,230,230)
    resultsTitle.TextXAlignment = Enum.TextXAlignment.Left

    local resultsBox = Instance.new("TextBox", resultsFrame)
    resultsBox.Name = "ResultsBox"
    resultsBox.Position = UDim2.new(0, 6, 0, 30)
    resultsBox.Size = UDim2.new(1, -12, 1, -36)
    resultsBox.BackgroundColor3 = Color3.fromRGB(8,8,8)
    resultsBox.TextColor3 = Color3.fromRGB(200,200,200)
    resultsBox.Font = Enum.Font.SourceSans
    resultsBox.TextSize = 14
    resultsBox.MultiLine = true
    resultsBox.ClearTextOnFocus = false
    resultsBox.TextWrapped = true
    resultsBox.Text = "No results."

    -- Buttons row (bottom)
    local btnY = 44 + 260 + 12
    local executeBtn = Instance.new("TextButton")
    executeBtn.Name = "Execute"
    executeBtn.Parent = main
    executeBtn.Size = UDim2.new(0, 240, 0, 56)
    executeBtn.Position = UDim2.new(0, 20, 0, btnY)
    executeBtn.BackgroundColor3 = Color3.fromRGB(20,20,20)
    executeBtn.Font = Enum.Font.SourceSansBold
    executeBtn.TextSize = 30
    executeBtn.Text = "Execute"
    executeBtn.TextColor3 = Color3.fromRGB(240,240,240)
    Instance.new("UICorner", executeBtn).CornerRadius = UDim.new(0,6)
    local exStroke = Instance.new("UIStroke", executeBtn) exStroke.Color = Color3.fromRGB(150,50,60) exStroke.Thickness = 2

    local clearBtn = Instance.new("TextButton")
    clearBtn.Name = "Clear"
    clearBtn.Parent = main
    clearBtn.Size = UDim2.new(0, 240, 0, 56)
    clearBtn.Position = UDim2.new(0, 280, 0, btnY)
    clearBtn.BackgroundColor3 = Color3.fromRGB(20,20,20)
    clearBtn.Font = Enum.Font.SourceSansBold
    clearBtn.TextSize = 30
    clearBtn.Text = "Clear"
    clearBtn.TextColor3 = Color3.fromRGB(240,240,240)
    Instance.new("UICorner", clearBtn).CornerRadius = UDim.new(0,6)
    local clStroke = Instance.new("UIStroke", clearBtn) clStroke.Color = Color3.fromRGB(150,50,60) clStroke.Thickness = 2

    -- small right buttons: Reset Character, Body Type Switch, Backdoor Scanner
    local smallW, smallH = 160, 40
    local gap = 12
    local xBase = 560

    local resetBtn = Instance.new("TextButton")
    resetBtn.Name = "ResetCharacter"
    resetBtn.Parent = main
    resetBtn.Size = UDim2.new(0, smallW, 0, smallH)
    resetBtn.Position = UDim2.new(0, xBase, 0, btnY + 8)
    resetBtn.BackgroundColor3 = Color3.fromRGB(16,16,16)
    resetBtn.Font = Enum.Font.SourceSans
    resetBtn.TextSize = 16
    resetBtn.Text = "Reset Character"
    resetBtn.TextColor3 = Color3.fromRGB(230,230,230)
    Instance.new("UICorner", resetBtn).CornerRadius = UDim.new(0,4)
    local rStroke = Instance.new("UIStroke", resetBtn) rStroke.Color = Color3.fromRGB(150,50,60) rStroke.Thickness = 2

    local bodyBtn = Instance.new("TextButton")
    bodyBtn.Name = "BodyTypeSwitch"
    bodyBtn.Parent = main
    bodyBtn.Size = UDim2.new(0, smallW, 0, smallH)
    bodyBtn.Position = UDim2.new(0, xBase + smallW + gap, 0, btnY + 8)
    bodyBtn.BackgroundColor3 = Color3.fromRGB(16,16,16)
    bodyBtn.Font = Enum.Font.SourceSans
    bodyBtn.TextSize = 16
    bodyBtn.Text = "Body Type Switch"
    bodyBtn.TextColor3 = Color3.fromRGB(230,230,230)
    Instance.new("UICorner", bodyBtn).CornerRadius = UDim.new(0,4)
    local bStroke = Instance.new("UIStroke", bodyBtn) bStroke.Color = Color3.fromRGB(150,50,60) bStroke.Thickness = 2

    local backdoorBtn = Instance.new("TextButton")
    backdoorBtn.Name = "BackdoorScanner"
    backdoorBtn.Parent = main
    backdoorBtn.Size = UDim2.new(0, smallW, 0, smallH)
    backdoorBtn.Position = UDim2.new(0, xBase + (smallW+gap)*2, 0, btnY + 8)
    backdoorBtn.BackgroundColor3 = Color3.fromRGB(16,16,16)
    backdoorBtn.Font = Enum.Font.SourceSans
    backdoorBtn.TextSize = 16
    backdoorBtn.Text = "Backdoor Scanner"
    backdoorBtn.TextColor3 = Color3.fromRGB(230,230,230)
    Instance.new("UICorner", backdoorBtn).CornerRadius = UDim.new(0,4)
    local bdStroke = Instance.new("UIStroke", backdoorBtn) bdStroke.Color = Color3.fromRGB(150,50,60) bdStroke.Thickness = 2

    -- Expose UI refs (keeps original names)
    local ui = {
        ScreenGui = screenGui,
        Main = main,
        Title = title,
        ExecutorBox = execFrame,
        TextBox = execText,
        Status = status,
        ExecuteButton = executeBtn,
        ClearButton = clearBtn,
        ResetCharacterButton = resetBtn,
        BodyTypeSwitchButton = bodyBtn,
        BackdoorScannerButton = backdoorBtn,
        ResultsBox = resultsBox,
        MinimizeButton = minimizeBtn,
        CloseButton = closeBtn
    }

    -- Default behaviors (mirrors original logic you provided)

    -- Clear clears the text box
    clearBtn.MouseButton1Click:Connect(function()
        pcall(function() execText.Text = "" end)
        pcall(function() status.Text = "Status: Cleared" end)
    end)

    -- Execute: prefer existing hooking (if external logic hooks ExecuteButton it will run), otherwise default execution as originally provided
    executeBtn.MouseButton1Click:Connect(function()
        local code = execText.Text or ""
        if code == "" then
            pcall(function() status.Text = "Status: Nothing to execute" end)
            return
        end
        pcall(function() status.Text = "Status: Executing..." end)
        local ok, fOrErr = pcall(function() return loadstring(code) end)
        if not ok or type(fOrErr) ~= "function" then
            pcall(function() status.Text = "Status: Compile error" end)
            return
        end
        local runOk, runErr = pcall(fOrErr)
        if not runOk then
            pcall(function() status.Text = "Status: Exec error" end)
            warn("Execution error:", runErr)
        else
            pcall(function() status.Text = "Status: Exec success" end)
        end
    end)

    -- BackdoorScanner: keep original behavior — try to call an existing scan() first (your scripts often define it)
    backdoorBtn.MouseButton1Click:Connect(function()
        pcall(function() status.Text = "Status: Scanning..." end)
        -- prefer local/global function named scan
        local scanned = false
        local ok, res = pcall(function()
            if type(scan) == "function" then
                scanned = true
                return scan()
            elseif _G and type(_G.scan) == "function" then
                scanned = true
                return _G.scan()
            end
            return nil
        end)
        if scanned and ok then
            pcall(function()
                if type(res) == "table" and #res > 0 then
                    status.Text = "Status: Scan complete (results)"
                    -- place results into the black text area for visibility (as in your original)
                    execText.Text = table.concat(res, "\n")
                    resultsBox.Text = "Scan produced results and placed into editor."
                else
                    status.Text = "Status: No backdoors detected"
                    resultsBox.Text = "Scan returned no results."
                end
            end)
        else
            pcall(function() status.Text = "Status: No scanner available" end)
            resultsBox.Text = "No scan() function found. Use external scanner or add scan() to environment."
        end
    end)

    -- ResetCharacter and BodyTypeSwitch call user-defined handlers if they exist (preserve original behavior)
    resetBtn.MouseButton1Click:Connect(function()
        pcall(function() status.Text = "Status: Resetting character..." end)
        local ok, _ = pcall(function()
            if type(ResetCharacter) == "function" then return ResetCharacter() end
            if _G and type(_G.ResetCharacter) == "function" then return _G.ResetCharacter() end
        end)
        if not ok then pcall(function() status.Text = "Status: Reset failed/handler missing" end) end
    end)

    bodyBtn.MouseButton1Click:Connect(function()
        pcall(function() status.Text = "Status: Switch body type..." end)
        local ok, _ = pcall(function()
            if type(BodyTypeSwitch) == "function" then return BodyTypeSwitch() end
            if _G and type(_G.BodyTypeSwitch) == "function" then return _G.BodyTypeSwitch() end
        end)
        if not ok then pcall(function() status.Text = "Status: Switch failed/handler missing" end) end
    end)

    -- Close / Minimize
    local minimized = false
    minimizeBtn.MouseButton1Click:Connect(function()
        if minimized then
            -- restore
            main.Size = UDim2.new(0, 650, 0, 360)
            execFrame.Visible = true
            resultsFrame.Visible = true
            clearBtn.Visible = true
            executeBtn.Visible = true
            resetBtn.Visible = true
            bodyBtn.Visible = true
            backdoorBtn.Visible = true
            status.Visible = true
            minimized = false
        else
            -- minimize to top bar only
            main.Size = UDim2.new(0, 300, 0, 36)
            execFrame.Visible = false
            resultsFrame.Visible = false
            clearBtn.Visible = false
            executeBtn.Visible = false
            resetBtn.Visible = false
            bodyBtn.Visible = false
            backdoorBtn.Visible = false
            status.Visible = false
            minimized = true
        end
    end)

    closeBtn.MouseButton1Click:Connect(function()
        pcall(function() screenGui:Destroy() end)
    end)

    -- Make the main draggable via topBar (drag only the top bar so typing isn't interrupted)
    local dragging, dragStart, startPos, dragInput
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = main.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    topBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Return UI references so the rest of your script can use them
    return ui
end

-- Auto-create UI
local ok, uiRefs = pcall(createFEARLESSInterface)
if not ok then warn("Failed to create FEARLESS interface:", uiRefs) end
